When would you want to use a remote repository rather than keeping all your work
local?

	| Changes that are kept local are always unsafe and prone to memory loss on crashes. 
	| This makes us use remote repositories saved on the cloud.
	| Enables multiple users to work on the same repository.
	| It helps in having one more level of abstraction after commit stage.
	| It helps in better collaboration.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    | That is definitely an option. But when more than one person is working on a 
    | repository, it gets difficult to track changes.
    | It always better to bring changes locally if we want to compare between commits.
    | Featute development and testing on GitHub becomes complicated.
    | It allows you to determine what is seen on Github. You may
    | have changed locally and want to keep it local.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    | Fork : Proprietary GitHub concept of braching remote repositories
    | Clone : To bring changes locally from remote repository OR local repository
    | Branch : Works on local repository to create a copy of working branch

What is the benefit of having a copy of the last known state of the remote
stored locally?

    | It helps in fetching and merging the data locally and make the push back to the 
    | GitHub.
    | We can reconcile the differences between remote and the simple local branch. Also, 
    | you are able to do that before you push or pull any other branches.  

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    | I would have used any other FileHosting online may be. 
    | Easier Part : No need to understand git architecture. Keep adding new versions on the file hosting.
    | Harder Part : No code support. Tracking changes at file level would be difficult. 
    | 				Visualizing these changes would have been an hectic job.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    | If the feature i am developing is not in a state of collaboration, i would 
    | want to keep it in a branch and later on go for a merge. 
    | If there is something under review, not yet collaborative, i would like to keep it
    | branch. 
    | Having changes directly on master would affect the build when trying to push and 
    | facing conflicts with other project members changes.
